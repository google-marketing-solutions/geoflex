"""A design for a GeoFleX experiment."""

import enum
from typing import Any
import uuid
import pydantic


class ExperimentType(enum.StrEnum):
  GO_DARK = "go_dark"
  HEAVY_UP = "heavy_up"
  HOLD_BACK = "hold_back"


class GeoAssignment(pydantic.BaseModel):
  """The geo assignment for a geoflex experiment."""

  control: list[str]
  treatment: list[str]

  model_config = pydantic.ConfigDict(extra="forbid")

  def __bool__(self) -> bool:
    return bool(self.control) or bool(self.treatment)


class ExperimentDesignConstraints(pydantic.BaseModel):
  """Constraints for a geoflex experiment design.

  The constraints are inputs which determine which experiment designs are
  eligible for a given experiment.
  """

  experiment_type: str = ExperimentType

  max_runtime_weeks: int = 8
  min_runtime_weeks: int = 2
  fixed_geos: GeoAssignment | None = None

  model_config = pydantic.ConfigDict(extra="forbid")

  @pydantic.model_validator(mode="after")
  def check_max_runtime_greater_than_min_runtime(
      self,
  ) -> "ExperimentDesignConstraints":
    if self.max_runtime_weeks < self.min_runtime_weeks:
      raise ValueError(
          "max_runtime_weeks must be greater than or equal to min_runtime_weeks"
      )
    return self

  @pydantic.model_validator(mode="after")
  def check_geos_not_in_both_fixed_treatment_and_fixed_control(
      self,
  ) -> "ExperimentDesignConstraints":
    if self.fixed_geos is None:
      return self

    geos_in_both = set(self.fixed_geos.treatment) & set(self.fixed_geos.control)
    if geos_in_both:
      raise ValueError(
          "Geos cannot be in both fixed_treatment_geos and fixed_control_geos:"
          f" {geos_in_both}"
      )
    return self


class ExperimentDesignEvaluation(pydantic.BaseModel):
  """The evaluation results of an experiment design."""

  design_id: str
  minimum_detectable_effects: dict[str, float]  # One per metric
  false_positive_rates: dict[str, float]  # One per metric
  power_at_minimum_detectable_effect: dict[str, float]  # One per metric

  model_config = pydantic.ConfigDict(extra="forbid")


class ExperimentDesign(pydantic.BaseModel):
  """An experiment design for a GeoFleX experiment."""

  primary_response_metric: str
  methodology: str
  methodology_parameters: dict[str, Any]
  runtime_weeks: int
  alpha: float
  fixed_geos: GeoAssignment | None

  # The design id is autogenerated for a new design.
  design_id: str = pydantic.Field(default_factory=lambda: str(uuid.uuid4()))

  # This is set after the design is created, when the geos are assigned.
  geo_assignment: GeoAssignment | None = None

  model_config = pydantic.ConfigDict(extra="forbid")

  @property
  def pretest_weeks(self) -> int:
    """The number of weeks in the pretest period.

    If a pretest period is to be used, this should be set as the pretest_weeks
    parameter in the methodology_parameters. If this parameter is not set then
    no pretest period is used.
    """
    return self.methodology_parameters.get("pretest_weeks", 0)
